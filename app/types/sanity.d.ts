/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type Slug = {
  _type: "slug";
  current?: string;
  source?: string;
};

export type Bundle = {
  _id: string;
  _type: "bundle";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name: string | null;
  overview: string | null;
  price: number | null;
  thumbnail: {
    asset: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
};

export type Category = {
  _id: string;
  _type: "category";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name: string;
  description: string;
  slice_index: number;
  items?: Array<
    | {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "dish";
      }
    | {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "bundle";
      }
  >;
};

export type Dish = {
  _id: string;
  _type: "dish";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name: string | null;
  price: number | null;
  served: Array<"warm" | "chilled">;
  overview: string | null;
  tags: Array<string>;
  thumbnail: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  details?: {
    story?: string;
    all_ingredients?: string;
    nutritional_info?: {
      calories?: number;
      fat?: number;
      carb?: number;
      protein?: number;
    };
    full_thumbnail?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    };
  };
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type AllSanitySchemaTypes =
  | SanityImagePaletteSwatch
  | SanityImagePalette
  | SanityImageDimensions
  | SanityFileAsset
  | Geopoint
  | Slug
  | Bundle
  | Category
  | Dish
  | SanityImageCrop
  | SanityImageHotspot
  | SanityImageAsset
  | SanityAssetSourceData
  | SanityImageMetadata;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ./app/lib/sanity/queries.ts
// Variable: CATEGORIES_QUERY
// Query: *[_type == "category"] {  name,  description,  slice_index,  items[] -> {    ...,    _type == "dish" => {      name,      price,      served,      overview,      thumbnail {        asset -> {          url        }      }    },    _type == "bundle" => {      name,      price,      overview,      thumbnail {        asset -> {          url        }      }    }  }}
export type CATEGORIES_QUERYResult = Array<{
  name: string | null;
  description: string | null;
  slice_index: number | undefined;
  items: Array<
    | {
        _id: string;
        _type: "bundle";
        _createdAt: string;
        _updatedAt: string;
        _rev: string;
        name: string | null;
        overview: string | null;
        price: number | null;
        thumbnail: {
          asset: {
            url: string | null;
          } | null;
        } | null;
      }
    | {
        _id: string;
        _type: "dish";
        _createdAt: string;
        _updatedAt: string;
        _rev: string;
        name: string | null;
        price: number | null;
        served: Array<"chilled" | "warm"> | null;
        overview: string | null;
        tags?: Array<string>;
        thumbnail: {
          asset: {
            url: string | null;
          } | null;
        } | null;
        details?: {
          story?: string;
          all_ingredients?: string;
          nutritional_info?: {
            calories?: number;
            fat?: number;
            carb?: number;
            protein?: number;
          };
          full_thumbnail?: {
            asset?: {
              _ref: string;
              _type: "reference";
              _weak?: boolean;
              [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
            };
            hotspot?: SanityImageHotspot;
            crop?: SanityImageCrop;
            _type: "image";
          };
        };
      }
  > | null;
}>;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
  interface SanityQueries {
    '*[_type == "category"] {\n  name,\n  description,\n  slice_index,\n  items[] -> {\n    ...,\n    _type == "dish" => {\n      name,\n      price,\n      served,\n      overview,\n      thumbnail {\n        asset -> {\n          url\n        }\n      }\n    },\n    _type == "bundle" => {\n      name,\n      price,\n      overview,\n      thumbnail {\n        asset -> {\n          url\n        }\n      }\n    }\n  }\n}': CATEGORIES_QUERYResult;
  }
}
